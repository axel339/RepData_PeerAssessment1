find_rtools()
library(Rtools)
library(devtools)
find_rtools()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL',type='source')
library(devtools)
find_rtools()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.setenv('MYSQL_HOME=C:/Program Files/MySQL/MySQL Server 5.5/')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
library(devtools)
install.packages('RMySQL',type='source')
$MYSQYL_HOME
$MYSQL_HOME
R.home()
library(devtools)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
con <- dbConnect(MySQL(), group = "lasers")
con2 <- dbConnect(MySQL(), password="9Vq95mei@MYSQL",
dbname="lasers", host="localhost")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
results <- dbGetQuery(ucscDb,"show databases;")
head(results)
length(results)
dbDisconnect(ucscDb)
ucscDb
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query
affyMis <- fetch(query)
quantile(addyMis$misMatches)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10)
dbClearResults(query)
dbClearResult(query)
dim(affyMisSmall)
affyMisSmall
dbDisconnect(hg19)
source("http://bioconductor.org?biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created
h5ls("example.h5")
h5write(c(1:10),"example.h5","foo/A")
h5read("example.h5")
h5ls("example.h5")
h5write(matrix(1:10,nr=5,nc=2),"example.h5","foo/A")
h5overwrite(matrix(1:10,nr=5,nc=2),"example.h5","foo/A")
?h5
?hdf5
h5ls("example.h5")
h5ls("example.h5","foo/A")
h5read("example.h5")
h5read("example.h5","foo/A")
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3))
h5write(c(12,13,14),"example.h5","foo/A",index=c(1:3))
?goreign
?foreign
library(foreign)
?foreign
install.packages("foreign")
library(foreign)
?foreign
install.packages("tuneR")
install.packages("seewave")
?oauthapp
myapp = oauth_app("gitHub",key="5eab17922e006e2c1d7e",secret="f7aa38072805aeefd26e97ec5ab3973f71916c28")
?GET
install.packages("httr")
library(httr)
myapp = oauth_app("gitHub",key="5eab17922e006e2c1d7e",secret="f7aa38072805aeefd26e97ec5ab3973f71916c28")
source("https://github.com/hadley/httr/blob/master/demo/oauth2-github.r")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp = oauth_app("github","f7aa38072805aeefd26e97ec5ab3973f71916c28")
myapp = oauth_app("github",key="5eab17922e006e2c1d7e",secret="f7aa38072805aeefd26e97ec5ab3973f71916c28")
gihub_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
install.packages("httpuv")
library(httpuv)
gihub_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github", "56b637a5baffac62cad9")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(acs)
sqldf()
?sqldf
install.packages("sqldf")
library(sqldf)
?sqldf
names(acs)
head(acs$AGEP)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
avs$AGEP
acs$AGEP
as>factors(acs$AGEP)
as.factors(acs$AGEP)
as.factor(acs$AGEP)
?unique
unique(acs$AGEP)
sort(unique(acs$AGEP))
?sqldf
sqldf("select pwgtp1 from acs")
sqldf("select * from acs")
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50",acs)
a1s <- sqldf("select * from warpbreaks limit 6")
library(httr)
?oauth_app
oauth_app("github","axel339","f7aa38072805aeefd26e97ec5ab3973f71916c28")
myapp <- oauth_app("github","axel339","f7aa38072805aeefd26e97ec5ab3973f71916c28")
?sign_oauth2.0
?config
setwd("C:/Users/SBI/Dropbox/Reproducible Research/RepData_PeerAssessment1")
head(data)
data <- read.csv("activity.csv")
data[,2] <- as.Date(data[,2], format = "%Y-%m-%d", origin ="2012-10-01")
head(data)
is.na(data[,3]0
is.na(data[,3]0
is.na(data[,3])
sum(is.na(data[,3]))
sum(is.na(data[,1]))
sum(is.na(data[,2]))
library(lattice)
comp <- complete.cases(data)
comp <- data[comp,]
mean2 <- tapply(comp$steps,comp$date,mean)
mean2 <- tapply(comp$steps,comp$interval,mean)
length(mean2)
length(comp$interval)
xyplot(mean2~interval|date,data=comp,type="l")
xyplot(mean2~interval,data=comp,type="l")
head(comp[,3])
comp[1:100,3])
comp[1:100,3]
comp[1:1000,3]
mean_stp_intrvl <- tapply(comp$steps,comp$interval,mean)
head(mean_stp_intrvl)
max(mean_stp_intrvl)
mean_stp_intrvl[1,]
mean_stp_intrvl["80"]
mean_stp_intrvl["800"]
mean_stp_intrvl["800":"1000"]
mean_stp_intrvl["1000"]
mean_stp_intrvl["900"]
mean_stp_intrvl==max(mean_stp_intrvl)
mean_stp_intrvl[max(mean_stp_intrvl)]
max(mean_stp_intrvl)
mean_stp_intrvl[==max(mean_stp_intrvl)]
names(mean_stp_intrvl==max(mean_stp_intrvl))
mean_stp_intrvl[mean_stp_intrvl==max(mean_stp_intrvl)]
data <- read.csv("activity.csv")
comp <- complete.cases(data)
comp <- data[comp,]
means <- tapply(comp$steps,comp$date,mean)
means
means <- tapply(comp$steps,comp$date,mean,na.rm-TRUE)
means <- tapply(comp$steps,comp$date,mean,na.rm=TRUE)
means
?as.Date
names(mean_stp_intrvl[mean_stp_intrvl==max(mean_stp_intrvl)])
?apply
apply(comp,1,is.na)
is.na(comp[1,])
apply(data,1,is.na)
is.na(data[1,])
apply(data,1,sum,is.na)
apply(data,1,sum(is.na(x))]
apply(data,1,sum(is.na(x)))
apply(data,1,sum(is.na(data)))
sum(is.na(data[,1:3])
)
sum(is.na(data[,1]))
sum(is.na(data))
length(mean_stp_intrvl)
mean_stp_intrvl["0"]
mean_stp_intrvl["5"]
head(data$steps)
data$steps[data$step=="NA"]
data$steps[data$steps=="NA"]
head(data)
mean_stp_intrvl[data$interval[1]]
data$interval[1]
data$interval[2]
data$interval[3]
mean_stp_intrvl[as.character(data$interval[1])]
mean_stp_intrvl[[as.character(data$interval[1])]]
mean_stp_intrvl[[as.character(data$interval[data$steps=="NA"])]]
mean_stp_intrvl[as.character(data$interval[data$steps=="NA"])]
mean_stp_intrvl[as.character(data$interval[1])]
mean_stp_intrvl[[as.character(data$interval[1])]]
mean_stp_intrvl[[as.character(data$interval)]]
mean_stp_intrvl[as.character(data$interval)]
head(data)
length(data$interval[data$steps=="NA"])
length(data$steps[data$steps=="NA"])
length(mean_stp_intrvl[data$interval[data$steps=="NA"]])
head(mean_stp_intrvl[data$interval[data$steps=="NA"]])
head(mean_stp_intrvl[as.character(data$interval[data$steps=="NA"])])
length(mean_stp_intrvl[as.character(data$interval[data$steps=="NA"])])
mean_stp_intrvl[1]
mean_stp_intrvl[[1]]
length(mean_stp_intrvl[[as.character(data$interval[data$steps=="NA"])]])
length(mean_stp_intrvl[[data$interval[data$steps=="NA"]]])
length(mean_stp_intrvl[data$interval[data$steps=="NA"]])
head(data$interval[data$steps=="NA"])
head(data$interval[is.na(data$steps)])
head(mean_stp_intrvl[data$interval[is.na(data$steps)]])
head(mean_stp_intrvl)
mean_stp_intrvl[0]
mean_stp_intrvl["0"]
head(mean_stp_intrvl[as.character(data$interval[is.na(data$steps)])])
data$steps[is.na(data$steps)] <- mean_stp_intrvl[as.character(data$interval[is.na(data$steps)])]
head(data$steps)
>lattice
?lattice
weekdays(data[,2])
data[,2] <- as.Date(data[,2], format="%Y-%m-%d")
weekdays(data[,2])
weekdays()
levels(weekdays(data[,2]))
levels(as.factor(weekdays(data[,2]))
)
levels(as.factor(weekdays(data[,2])))
f <- levels(as.factor(weekdays(data[,2])))
xyplot(steps~interval|f,data=data,type="l")
mean_stp_intrvl <- tapply(data$steps,data$interval,mean)
xyplot(mean_stp_intrvl~interval|f,data=data,type="l")
length(mean_stp_intrvl)
xyplot(mean_stp_intrvl~interval,data=data,type="l")
xyplot(steps~interval|f,data=data,type="l")
head(weekdays(data[,2]))
weekdays(data[,2])==c("Monday","Tuesday","Wednesday","Thursday","Friday")
weekdays(data[,2])=="Saturday" | weekdays(data[,2]=="Sunday"
weekdays(data[,2])=="Saturday" | weekdays(data[,2]=="Sunday"
weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"
days <- if(weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"){"weekend"}else{"weekday"}
days <- weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"
head(days)
levels(days)
days[F]
days[T]
days[TRUE] <- "weekend"
days
days["FALSE"] <- weekday
days["FALSE"] <- "weekday"
head(days)
days <- weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"
days[TRUE] <- "weekend"
head(days)
days[FALSE]
days["FALSE]
""
mean_stp_intrvl <- tapply(comp$steps,comp$interval,mean)
mean_stp_intrvl <- tapply(comp$steps,comp$interval,mean)
))
)98
dfg
dfng
n b,.  bgdf#
g
n b,.  bgdf#
days["FALSE"]
days <- weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"
days["FALSE"]
head(days)
days[FALSE]
days[0]
days[1]
days[2]
days[days==TRUE] <- "weekend"
head(days)
days[days=="FALSE"] <- "weekday"
mean_stp_intrvl <- tapply(comp$steps,comp$interval,mean)
xyplot(mean_stp_intrvl~interval|days,data=comp,type="l")
mean_stp_intrvl <- tapply(comp$steps,comp$interval,mean)
xyplot(steps~interval|days,data=comp,type="l")
xyplot(steps~interval,data=comp,type="l",layout=c(1,2))
xyplot(steps~interval,data=comp,type="l",layout=c(2,2))
xyplot(steps~interval,data=comp,type="l",layout=c(2,1))
xyplot(steps~interval,data=comp,type="l"
)
xyplot(steps~interval|day,data=comp,type="l")
xyplot(steps~interval|days,data=comp,type="l")
xyplot(steps~interval|days,data=comp,type="l",layout=c(2,1))
xyplot(steps~interval|days,data=comp,type="l",layout=c(1,2))
?tapply
mean_stp_intrvl <- tapply(data$steps,data$interval,days,mean)
mean_stp_intrvl <- tapply(data$steps,c(data$interval,days),mean)
length(data$steps)
length(data$interval)
length(days)
mean_stp_intrvl <- tapply(data$steps,data$interval,days,mean)
mean_stp_days <- tapply(data$steps,days,mean)
xyplot(steps~interval|days,data=comp,type="l",layout=c(1,2))
xyplot(mean_stp_days~interval|days,data=comp,type="l",layout=c(1,2))
xyplot(mean_stp_days~days,data=comp,type="l",layout=c(1,2))
xyplot(mean_stp_days~interval,data=comp,type="l",layout=c(1,2))
data <- transforma(data,days=days)
data <- transform(data,days=days)
head(data)
with(data, tapply(steps, list(interval, days), meam))
with(data, tapply(steps, list(interval, days), mean))
df <- with(data, tapply(steps, list(interval, days), mean))
df[,1]
head(data)
head(df)
names(df)
class(df)
class(data)
xyplot(df~interval,data=df,type="l",layout=c(1,2))
xyplot(df~interval,data=df,type="l",layout=c(1,2))
plot(df)
xyplot(df~interval,data=data,type="l",layout=c(1,2))
xyplot(df~interval|days,data=data,type="l",layout=c(1,2))
xyplot(c(df[,1],df[],2])~interval|days,data=data,type="l",layout=c(1,2))
xyplot(c(df[,1],df[,2])~interval|days,data=data,type="l",layout=c(1,2))
xyplot(c(df[,1],df[,2])~interval|days,data=data,type="l",layout=c(1,2))
xyplot(df[,1]~interval|days,data=data,type="l",layout=c(1,2))
xyplot(c(df[,1]~interval,df[,2]~interval)|days,data=data,type="l",layout=c(1,2))
library(ggplo2)
library(ggplot2)
qplot(df,data=data,facets = days~.)
qplot(steps,data=data,facets = days~.)
qplot(steps,interval,data=data,facets = days~.)
qplot(steps,interval,data=data,facets = .~days)
qplot(interval,steps,data=data,facets = .~days,geom="points")
qplot(interval,steps,data=data,facets = .~days,geom="point")
qplot(interval,steps,data=data,facets = .~days,geom="line")
qplot(interval,mean(steps),data=data,facets = .~days,geom="line")
qplot(interval,steps,data=data,facets = .~days,geom="line")
qplot(df,data=df,facets = .~days,geom="line")
df<-transform(df)
qplot(df,data=df,facets = .~days,geom="line")
head(df)
names(df)
colNames(df)
colName(df)
qplot(df,data=df,facets = .~days,geom="line")
qplot(interval,steps,data=data,facets = .~days,geom="line")
plot(df)
qplot(df)
plot(df,geom="line")
qplot(df,geom="line")
qplot(df,data=df,geom="line")
data$days
str(data)
data[,3] <- as.factor(data[,3])
head(data)
str(data)
qplot(interval,steps,data=data,facets = .~days,geom="line")
data[,3] <- as.numeric(data[,3])
str(data)
qplot(interval,steps,data=data,facets = .~days,geom="line")
qplot(interval,steps,data=data,facets = days~.,geom="line")
qplot(interval,steps,data=data,facets = days~.,geom="line",color=days)
?geom
?geom_smooth
?qplot
qplot(interval,steps,data=data,facets = days~.,geom="path",color=days)
qplot(interval,steps,data=data,facets = days~.,geom="line",color=days)
qplot(interval,steps,data=data,facets = days~.,geom="density",color=days)
qplot(interval,steps,data=data,facets = days~.,geom="line",color=days)
qplot(interval,steps,data=data,facets = days~.,geom="density")
qplot(interval,steps,data=data,facets = days~.,geom="line",color=days)
head(data)
data <- read.csv("activity.csv")
data[,2] <- as.Date(data[,2], format="%Y-%m-%d")
days <- weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"
days[days==TRUE] <- "weekend"
days[days=="FALSE"] <- "weekday"
data <- transform(data,days=days)
head(data)
qplot(interval,steps,data=data,facets = days~.,geom="line",color=days)
qplot(interval,steps,data=data,facets = days~.,geom="point",color=days)
data$interval
head(df)
?transpose
head(df')
head(t(df))
plot(t(df))
length(unique(data$interval))
length(mean_stp_intrvl)
qplot(unique(interval),steps,data=data,facets = days~.,geom="point",color=days)
qplot(unique(interval),mean_stp_intrvl|days,steps,data=data,facets = days~.,geom="point",color=days)
mean_stp_days
mean_stp_intrvl
with(data, tapply(steps, list(interval, days), mean))
head(data)
mean_stp_intrvl <- tapply(comp$steps,comp$interval,mean)
data$steps[is.na(data$steps)] <- mean_stp_intrvl[as.character(data$interval[is.na(data$steps)])]
with(data, tapply(steps, list(interval, days), mean))
df <- data.frame(with(data, tapply(steps, list(interval, days), mean)))
plot(df[,1])
plot(df[,1],lwt=3)
?plot
plot(df[,1],type="l")
qplot(df[,1],data=data,geom="line")
qplot(unique(interval),mean_stp_intrvl|days,data=data,facets = days~.,geom="point",color=days)
qplot(df[,1],data=data,geom="bar")
plot(df[,1],lwt=3)
plot(df[,1],type="l")
plot(df[,1],type="l")
plot(df[,1],type="l",colo=2)
plot(df[,1],type="l",color=2)
plot(df[,1],type="l",color=2)
plot(df[,1],type="l")
plot(df[,1],type="l")
plot(df[,1],type="l")
warning()
warnings()
plot(df[,1],type="l")
?plot
plot(df[,1],type="l")
plot(df[,1],unique(data$interval),type="l")
plot(unique(data$interval),df[,1],type="l")
par(mfcol=c(2,1))
plot(unique(data$interval),df[,1],type="l")
plot(unique(data$interval),df[,2],type="l")
plot(unique(data$interval),df[,2],type="l")
plot(unique(data$interval),df[,1],type="l")
head(df)
plot(unique(data$interval),df[,2],type="l",main="weekend")
plot(unique(data$interval),df[,1],type="l",main="weekday")
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps")
plot(unique(data$interval),df[,1],type="l",main="weekend",xlab="Interval",ylab="Average number of steps")
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps")
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps")
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=3)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
head(data$interval)
data <- read.csv("activity.csv")
data[,2] <- as.Date(data[,2], format="%Y-%m-%d")
days <- weekdays(data[,2])=="Saturday" | weekdays(data[,2])=="Sunday"
head(days)
days[days==TRUE] <- "weekend"
days[days=="FALSE"] <- "weekday"
head(days)
days[1:100]
days[1:1000]
days
?par
?plot
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1))
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(4,4,4,4))
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(3,4,4,4))
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(1,1,1,1))
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(3,3,3,3))
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(3,2,2,2))
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(6,2,2,2))
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
par(mfcol=c(2,1),mar=c(1,4,4,4))
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
par(mfcol=c(2,1),mar=c(2,4,4,2))
plot(unique(data$interval),df[,2],type="l",main="weekend",xlab="Interval",ylab="Average number of steps",col=2)
plot(unique(data$interval),df[,1],type="l",main="weekday",xlab="Interval",ylab="Average number of steps",col=4)
