q()
a = available.packages()
head(rownames(a),10)
install.packages("slidify")
install.packages(c("ggplot2", "devtools"))
a = available.packages(ggplot2)
?ggplot2
??ggplot2
ggplot""
ggplot2
install.packages(c("ggplot2", "devtools"))
install.packages(c("ggplot2", "devtools"))
library(ggplot2)
ggplot2
search()
install.packages(c("slidify", "ggplot2", "devtools"))
library(ggplot2)
search()
library(ggplot2)
search()
ggplot2
help.search(ggplot2)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
find-rtools()
find_rtools()
library(Rtools)
library(devtools)
find_rtools()
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages(“RMySQL”, type = “source”)
install.packages('RMySQL',type='source')
library(devtools)
find_rtools()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.setenv('MYSQL_HOME=C:/Program Files/MySQL/MySQL Server 5.5/')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
library(devtools)
install.packages('RMySQL',type='source')
$MYSQYL_HOME
$MYSQL_HOME
R.home()
library(devtools)
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
con <- dbConnect(MySQL(), group = "lasers")
con2 <- dbConnect(MySQL(), password="9Vq95mei@MYSQL",
dbname="lasers", host="localhost")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
results <- dbGetQuery(ucscDb,"show databases;")
head(results)
length(results)
dbDisconnect(ucscDb)
ucscDb
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
query
affyMis <- fetch(query)
quantile(addyMis$misMatches)
quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10)
dbClearResults(query)
dbClearResult(query)
dim(affyMisSmall)
affyMisSmall
dbDisconnect(hg19)
source("http://bioconductor.org?biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created
h5ls("example.h5")
h5write(c(1:10),"example.h5","foo/A")
h5read("example.h5")
h5ls("example.h5")
h5write(matrix(1:10,nr=5,nc=2),"example.h5","foo/A")
h5overwrite(matrix(1:10,nr=5,nc=2),"example.h5","foo/A")
?h5
?hdf5
h5ls("example.h5")
h5ls("example.h5","foo/A")
h5read("example.h5")
h5read("example.h5","foo/A")
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3))
h5write(c(12,13,14),"example.h5","foo/A",index=c(1:3))
?goreign
?foreign
library(foreign)
?foreign
install.packages("foreign")
library(foreign)
?foreign
install.packages("tuneR")
install.packages("seewave")
?oauthapp
myapp = oauth_app("gitHub",key="5eab17922e006e2c1d7e",secret="f7aa38072805aeefd26e97ec5ab3973f71916c28")
?GET
install.packages("httr")
library(httr)
myapp = oauth_app("gitHub",key="5eab17922e006e2c1d7e",secret="f7aa38072805aeefd26e97ec5ab3973f71916c28")
source("https://github.com/hadley/httr/blob/master/demo/oauth2-github.r")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "56b637a5baffac62cad9")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp = oauth_app("github","f7aa38072805aeefd26e97ec5ab3973f71916c28")
myapp = oauth_app("github",key="5eab17922e006e2c1d7e",secret="f7aa38072805aeefd26e97ec5ab3973f71916c28")
gihub_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
install.packages("httpuv")
library(httpuv)
gihub_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
myapp <- oauth_app("github", "56b637a5baffac62cad9")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(acs)
sqldf()
?sqldf
install.packages("sqldf")
library(sqldf)
?sqldf
names(acs)
head(acs$AGEP)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
avs$AGEP
acs$AGEP
as>factors(acs$AGEP)
as.factors(acs$AGEP)
as.factor(acs$AGEP)
?unique
unique(acs$AGEP)
sort(unique(acs$AGEP))
?sqldf
sqldf("select pwgtp1 from acs")
sqldf("select * from acs")
sqldf("select * from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50",acs)
a1s <- sqldf("select * from warpbreaks limit 6")
library(httr)
?oauth_app
oauth_app("github","axel339","f7aa38072805aeefd26e97ec5ab3973f71916c28")
myapp <- oauth_app("github","axel339","f7aa38072805aeefd26e97ec5ab3973f71916c28")
?sign_oauth2.0
?config
setwd("C:/Users/SBI/Dropbox/Getting and cleaning data")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","Data/microdata1.csv")
data <- read.csv("Data/microdata1.csv")
head(data)
names(data)
head(data$ACR)
data[data$ACR == 3 & data$AGS == 6, ]
data[which(data$ACR) == 3 & which(data$AGS) == 6, ]
data[which(data$ACR == 3) & which(data$AGS == 6), ]
data[which(data$ACR == 3) & which(data$AGS == 6), 11:12]
summary(data)
head(data[data$ACR == 3, ])
head(data[which(data$ACR == 3), ])
agricultureLogical <- data$ACR ==3 & data%AGS == 6
agricultureLogical <- data$ACR ==3 & data$AGS == 6
head(agricultureLogical)
head(which(agricultureLogical))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","Data/quizz3_q2,jpg")
readJPEG
install.packages("jpeg")
libraru(jpeg)
library(jpeg)
readJPEG("Data/quizz3_q2,jpg")
pic <- readJPEG("Data/quizz3_q2,jpg")
summary(pic)
pic <- readJPEG("Data/quizz3_q2,jpg",native=TRUE)
pic <- readJPEG("Data/quizz3_q2,jpg",native=FALSE)
summary(pic)
pic <- readJPEG("Data/quizz3_q2,jpg",native=TRUE)
summary(pic)
pic <- readJPEG("Data/quizz3_q2,jpg",native=FALSE)
summary(pic)
quantile(pic, probs=c(0.3,0.8))
pic <- readJPEG("Data/quizz3_q2,jpg",native=TRUE)
summary(pic)
pic <- readJPEG("Data/quizz3_q2,jpg",native=TRUE)
quantile(pic, probs=c(0.3,0.8))
head(PIC)
head(PIC)
head(pic)
is.na(pic)
sum(is.na(pic))
pic <- readJPEG("Data/quizz3_q2.jpg",native=TRUE)
sum(is.na(pic))
quantile(pic, probs=c(0.3,0.8))
which(agricultureLogical)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","Data/GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","Data/education.csv")
GDP <- read.csv("Data/GDP.csv")
EDU <- read.csv("Data/education.csv")
head(GDP)
GDP <- read.csv("Data/GDP.csv",head=FALSE,skip=10,nrows=460)
head(GDP)
GDP <- read.csv("Data/GDP.csv",header=FALSE,skip=10,nrows=460)
head(GDP)
GDP <- read.csv("Data/GDP.csv",header=FALSE,nrows=460)
head(GDP)
GDP <- read.csv("Data/GDP.csv",skip=10,nrows=460)
head(GDP)
GDP <- read.csv("Data/GDP.csv",header=FALSE,skip=1,nrows=460)
head(GDP)
GDP <- read.csv("Data/GDP.csv",header=FALSE,skip=5,nrows=460)
head(GDP)
GDP$names
colNames(GDP)
?colNames
?colnames
colnames(GDP)
colnames(GDP[1])
colnames(GDP[1]) <- ID
colnames(GDP[1]) <- "ID"
colnames(GDP)
head(GDP)
names(GDP)
head(EDU)
match(EDU[,1],GDP[,1])
?match
install.packages("plyr")
library(plyr)
which(match(EDU[,1],GDP[,1]))
match(which(EDU[,1]),which(GDP[,1])
)
sum(!is.na(match(EDU[,1],GDP[,1])))
head(GDP)
head(EDU)
length(GDP[,1])
length(EDU[,1])
sum(is.na(EDU[,1]))
intersect(GDP[,1],EDU[,1])
length(intersect(GDP[,1],EDU[,1]))
?intersect
length(setequal(GDP[,1],EDU[,1]))
setequal(GDP[,1],EDU[,1])
length(unique(intersect(GDP[,1],EDU[,1])))
head(GDP)
is.na(GDP[,2])
sum(is.na(GDP[,2]))
GDP[,2]
tail(GDP)
GDP <- read.csv("Data/GDP.csv",header=FALSE,skip=5,nrows=230)
tail(GDP)
GDP <- read.csv("Data/GDP.csv",header=FALSE,skip=5,nrows=231)
tail(GDP)
sum(is.na(GDP[,2]))
length(intersect(GDP[,1],EDU[,1]))
GDP_rank <- which(GDP[,2])
GDP_rank <- which(!is.NA(GDP[,2])
)
GDP_rank <- which(!is.na(GDP[,2]))
length(GDP_rank)
GDP_rank[,1]
GDP_rank
head(GDP_rank)
length(intersect(GDP[!is.na(GDP[,2]),1],EDU[,1]))
arrange(GDP,desc(v2))
head(GDP)
GDP$v2
GDP$V2
arrange(GDP,desc(V2))
GDP[!is.na(GDP[,2])]
GDP[!is.na(GDP[,2]),2]
?merge
merge(GDP,EDU,by.x="V1")
merge(GDP,EDU,by.x="V1",by.y="CountryCode")
new <- merge(GDP,EDU,by.x="V1",by.y="CountryCode")
names(new)
head(new)
names(new)
?xtabs
xtabs(Income.Group~V2,data=new)
?with
with(data, tapply(V2, Income.Group, mean)
)
with(new, tapply(V2, Income.Group, mean))
with(new[!is.na(new[,2]),], tapply(V2, Income.Group, mean))
length(new[,1])
length(unique(new[,1])
)
library(Hmisc)
cut2(new[,2],g=5)
cut2(new[!is.na(new[,2]),2],g=5)
new$rankGroups <- cut2(new[!is.na(new[,2]),2],g=5)
new$rankGroups <- cut2(new[,2],g=5)
head(new)
new$rankGroups
new$rankGroups == [1,39]
new$rankGroups == [1,39)
new$rankGroups == "[1,39)"
new$rankGroups == "[  1, 39)"
which(new$rankGroups == "[  1, 39)")
which(new$rankGroups == "[  1, 39)" & new$Income.Group == "Lower middle income")
length(which(new$rankGroups == "[  1, 39)" & new$Income.Group == "Lower middle income"))
library(devtools)
install_github("ropensci/plotly"")
install_github("ropensci/plotly")
library(plotly)
setwd("C:/Users/SBI/Dropbox/Reproducible Research/RepData_PeerAssessment1")
ls
?knit2html
library(knitr)
?knit2html
knit2html("PA1_template.Rmd")
